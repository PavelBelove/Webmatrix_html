import { Storage } from '../utils/storage';

export class AnalysisTable {
  constructor(settings) {
    this.settings = settings;
    this.element = document.createElement('div');
    this.element.className = 'table-container';

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    this.filterContainer = document.createElement('div');
    this.filterContainer.className = 'table-filters';

    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    this.tableWrapper = document.createElement('div');
    this.tableWrapper.className = 'table-wrapper';

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    this.tableScroll = document.createElement('div');
    this.tableScroll.className = 'table-scroll';

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    this.table = document.createElement('table');
    this.table.id = 'resultsTable';

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    this.tableScroll.appendChild(this.table);
    this.tableWrapper.appendChild(this.tableScroll);
    this.element.appendChild(this.filterContainer);
    this.element.appendChild(this.tableWrapper);

    this.data = [];
    this.columns = [];
    this.currentRow = 0;
    this.isProcessing = false;
    this.filters = {};
    this.selectedRows = new Set();
    this.sortDirections = {};

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.controls = this.createControls();
    this.element.insertBefore(this.controls, this.element.firstChild);

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
    this.statusBar = document.createElement('div');
    this.statusBar.className = 'status-bar';
    this.statusBar.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤, –Ω–æ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    this.element.insertBefore(this.statusBar, this.tableWrapper);

    // –ë–∏–Ω–¥–∏–º –º–µ—Ç–æ–¥—ã
    this.handleMasterCheckbox = this.handleMasterCheckbox.bind(this);
    this.handleRowCheckbox = this.handleRowCheckbox.bind(this);
    this.toggleAllRows = this.toggleAllRows.bind(this);
    this.toggleRow = this.toggleRow.bind(this);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
    this.rowMarks = {}; // {rowIndex: 'true'|'false'|'hidden'}
  }

  setColumns(columns) {
    this.columns = columns;
    this.renderHeader();
    this.setupFilters();
  }

  renderHeader() {
    const thead = document.createElement('thead');
    const tr = document.createElement('tr');

    // –ö–æ–ª–æ–Ω–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    const checkboxTh = document.createElement('th');
    checkboxTh.className = 'checkbox-column';
    const masterCheckbox = document.createElement('input');
    masterCheckbox.type = 'checkbox';
    masterCheckbox.checked = true;
    masterCheckbox.addEventListener('change', this.handleMasterCheckbox);
    checkboxTh.appendChild(masterCheckbox);
    tr.appendChild(checkboxTh);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const createBasicHeader = column => {
      const th = document.createElement('th');
      th.className = 'header-cell';
      th.dataset.column = column;

      const headerContent = document.createElement('div');
      headerContent.className = 'header-content';

      const titleSpan = document.createElement('span');
      titleSpan.textContent = column;
      headerContent.appendChild(titleSpan);

      const controls = document.createElement('div');
      controls.className = 'header-controls';

      // –ò–∫–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const sortIcon = document.createElement('span');
      sortIcon.className = 'sort-icon';
      sortIcon.innerHTML = '‚ÜïÔ∏è';
      sortIcon.title = 'Sort';
      sortIcon.addEventListener('click', e => {
        e.stopPropagation();
        this.sortByColumn(column);
      });
      controls.appendChild(sortIcon);

      headerContent.appendChild(controls);
      th.appendChild(headerContent);
      return th;
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if (this.data.length > 0) {
      Object.keys(this.data[0]).forEach(column => {
        tr.appendChild(createBasicHeader(column));
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.columns.forEach(column => {
      if (!column.trim()) return;
      tr.appendChild(createBasicHeader(column));
    });

    thead.appendChild(tr);
    this.table.innerHTML = '';
    this.table.appendChild(thead);

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    this.renderBody();

    // –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    this.addFiltersToHeaders();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  addFiltersToHeaders() {
    const headers = Array.from(this.table.querySelectorAll('thead th'));
    headers.forEach(th => {
      const column = th.dataset.column;
      if (!column) return;

      const values = new Set();
      const columnIndex = Array.from(th.parentElement.children).indexOf(th);

      Array.from(this.table.querySelectorAll('tbody tr')).forEach(row => {
        if (row.cells[columnIndex]) {
          values.add(row.cells[columnIndex].textContent);
        }
      });

      if (values.size <= 20) {
        const controls = th.querySelector('.header-controls');
        const filterIcon = document.createElement('span');
        filterIcon.className = 'filter-icon';
        filterIcon.innerHTML = 'üîç';
        filterIcon.title = 'Filter';
        filterIcon.dataset.column = column;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ dataset
        filterIcon.dataset.values = JSON.stringify([...values]);

        // –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        const handleFilterClick = e => {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();

          // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dataset
          const savedValues = new Set(JSON.parse(filterIcon.dataset.values));
          this.toggleFilter(column, filterIcon, savedValues, e);
        };

        filterIcon.addEventListener('click', handleFilterClick, true);
        controls.appendChild(filterIcon);
      }
    });
  }

  setupFilters() {
    // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
  }

  toggleFilter(column, filterIcon, values, event) {
    console.log('Toggle filter for column:', column, 'Values:', values);

    event.stopPropagation();
    event.preventDefault();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥—Ä–æ–ø–¥–∞—É–Ω—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
    document.querySelectorAll('.filter-dropdown').forEach(d => d.remove());
    document.querySelectorAll('.filter-icon').forEach(icon => icon.classList.remove('active'));

    // –°–æ–∑–¥–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω
    const dropdown = document.createElement('div');
    dropdown.className = 'filter-dropdown';
    dropdown.setAttribute('data-column', column);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = document.createElement('div');
    content.className = 'filter-content';

    // "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" —á–µ–∫–±–æ–∫—Å
    const selectAllWrapper = document.createElement('div');
    selectAllWrapper.className = 'filter-checkbox-wrapper';
    const selectAllCheckbox = document.createElement('input');
    selectAllCheckbox.type = 'checkbox';
    selectAllCheckbox.checked = true;
    const selectAllLabel = document.createElement('label');
    selectAllLabel.textContent = 'Select All';
    selectAllWrapper.appendChild(selectAllCheckbox);
    selectAllWrapper.appendChild(selectAllLabel);
    content.appendChild(selectAllWrapper);

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const divider = document.createElement('hr');
    content.appendChild(divider);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const sortedValues = [...values].sort((a, b) => a.toString().localeCompare(b.toString()));
    console.log('Sorted values:', sortedValues);

    sortedValues.forEach(value => {
      const wrapper = document.createElement('div');
      wrapper.className = 'filter-checkbox-wrapper';

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.checked = true;
      checkbox.addEventListener('change', e => {
        e.stopPropagation();
        this.applyColumnFilter(column, filterIcon);
        const allChecked = [...wrapper.parentElement.querySelectorAll('input[type="checkbox"]')]
          .slice(1)
          .every(cb => cb.checked);
        selectAllCheckbox.checked = allChecked;
      });

      const label = document.createElement('label');
      label.textContent = value || '(Empty)';

      wrapper.appendChild(checkbox);
      wrapper.appendChild(label);
      content.appendChild(wrapper);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    selectAllCheckbox.addEventListener('change', e => {
      e.stopPropagation();
      const checkboxes = content.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(cb => {
        if (cb !== selectAllCheckbox) cb.checked = selectAllCheckbox.checked;
      });
      this.applyColumnFilter(column, filterIcon);
    });

    dropdown.appendChild(content);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM –¥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    document.body.appendChild(dropdown);

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω
    const rect = filterIcon.getBoundingClientRect();
    const dropdownRect = dropdown.getBoundingClientRect();

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
    const viewportHeight = window.innerHeight;
    const viewportWidth = window.innerWidth;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π)
    let top = rect.bottom;
    let left = rect.left;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –¥—Ä–æ–ø–¥–∞—É–Ω —Å–Ω–∏–∑—É
    if (top + dropdownRect.height > viewportHeight) {
      // –ï—Å–ª–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–¥ –∏–∫–æ–Ω–∫–æ–π
      top = rect.top - dropdownRect.height;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
    if (left + dropdownRect.width > viewportWidth) {
      left = viewportWidth - dropdownRect.width - 10;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
    if (left < 0) {
      left = 10;
    }

    // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    top += window.scrollY;
    left += window.scrollX;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    Object.assign(dropdown.style, {
      position: 'absolute',
      top: `${top}px`,
      left: `${left}px`,
      zIndex: '10000',
    });

    filterIcon.classList.add('active');

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    const handleOutsideClick = e => {
      if (!dropdown.contains(e.target) && !filterIcon.contains(e.target)) {
        dropdown.remove();
        filterIcon.classList.remove('active');
        document.removeEventListener('click', handleOutsideClick);
      }
    };

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    requestAnimationFrame(() => {
      document.addEventListener('click', handleOutsideClick);
    });

    console.log('Dropdown element:', dropdown);
  }

  renderBody() {
    const tbody = document.createElement('tbody');

    this.data.forEach((row, index) => {
      const tr = document.createElement('tr');
      tr.id = `row-${index}`;

      // –ß–µ–∫–±–æ–∫—Å
      const checkboxTd = document.createElement('td');
      checkboxTd.className = 'checkbox-column';
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.checked = this.rowMarks[index] === 'true';
      checkbox.onchange = () => this.handleRowCheckbox(index, checkbox.checked);
      checkboxTd.appendChild(checkbox);
      tr.appendChild(checkboxTd);

      // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      Object.values(row).forEach(value => {
        const td = document.createElement('td');
        td.className = 'data-cell';
        td.textContent = value; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        td.title = value; // –î–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        tr.appendChild(td);
      });

      // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      this.columns.forEach(() => {
        const td = document.createElement('td');
        td.className = 'result-cell';
        td.textContent = '...';
        td.style.color = '#999';
        tr.appendChild(td);
      });

      tbody.appendChild(tr);
    });

    const existingTbody = this.table.querySelector('tbody');
    if (existingTbody) {
      existingTbody.remove();
    }
    this.table.appendChild(tbody);
  }

  toggleRow(index, checked) {
    if (checked) {
      this.selectedRows.add(index);
    } else {
      this.selectedRows.delete(index);
    }
  }

  toggleAllRows(checked) {
    const selectedCount = Object.values(this.rowMarks).filter(state => state === 'true').length;
    const totalVisible = Object.values(this.rowMarks).filter(state => state !== 'hidden').length;

    if (!checked && selectedCount > 0 && selectedCount < totalVisible) {
      if (!confirm('This will clear your current selection. Continue?')) {
        return;
      }
    }

    const checkboxes = this.table.querySelectorAll('tbody input[type="checkbox"]');
    checkboxes.forEach((checkbox, index) => {
      checkbox.checked = checked;
      if (checked) {
        this.selectedRows.add(index);
        this.rowMarks[index] = 'true';
      } else {
        this.selectedRows.delete(index);
        this.rowMarks[index] = 'false';
      }
    });
  }

  sortByColumn(column) {
    const tbody = this.table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = Array.from(this.table.querySelectorAll('thead th'));
    const columnIndex = headers.findIndex(
      th => th.querySelector('.header-content span')?.textContent === column
    );

    if (columnIndex === -1) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const currentDirection = this.sortDirections?.[column] || 'asc';
    const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
    this.sortDirections = { ...this.sortDirections, [column]: newDirection };

    rows.sort((a, b) => {
      const aValue = a.cells[columnIndex]?.textContent || '';
      const bValue = b.cells[columnIndex]?.textContent || '';

      // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —á–∏—Å–ª–∞
      const aNum = Number(aValue);
      const bNum = Number(bValue);
      if (!isNaN(aNum) && !isNaN(bNum)) {
        return newDirection === 'asc' ? aNum - bNum : bNum - aNum;
      }

      // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
      return newDirection === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
    });

    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortIcon = headers[columnIndex].querySelector('.sort-icon');
    if (sortIcon) {
      sortIcon.innerHTML = newDirection === 'asc' ? '‚Üë' : '‚Üì';
    }
  }

  applyFilters() {
    const tbody = this.table.querySelector('tbody');
    if (!tbody) return;

    const rows = tbody.querySelectorAll('tr');
    if (!rows.length) return;

    const thead = this.table.querySelector('thead tr');
    if (!thead) return;

    const headerCells = Array.from(thead.cells);

    rows.forEach(row => {
      const rowIndex = Number(row.id.split('-')[1]);
      let show = true;

      Object.entries(this.filters).forEach(([column, allowedValues]) => {
        const columnIndex = headerCells.findIndex(cell => {
          const span = cell.querySelector('.header-content span');
          return span?.textContent === column;
        });

        if (columnIndex !== -1 && row.cells[columnIndex]) {
          const cellText = row.cells[columnIndex].textContent;
          if (!allowedValues.has(cellText)) {
            show = false;
          }
        }
      });

      row.style.display = show ? '' : 'none';
      this.rowMarks[rowIndex] = show ? this.rowMarks[rowIndex] : 'hidden';
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å
    const visibleRows = Array.from(rows).filter(row => row.style.display !== 'none');
    const selectedVisibleRows = visibleRows.filter(
      row => this.rowMarks[Number(row.id.split('-')[1])] === 'true'
    );

    const masterCheckbox = this.table.querySelector('thead input[type="checkbox"]');
    if (masterCheckbox) {
      masterCheckbox.checked =
        visibleRows.length > 0 && selectedVisibleRows.length === visibleRows.length;
    }
  }

  loadData(data) {
    this.data = data;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –≤—ã–±–æ—Ä - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.rowMarks = {};
    this.selectedRows.clear(); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤—ã–±–æ—Ä
    data.forEach((_, index) => {
      this.rowMarks[index] = 'true';
      this.selectedRows.add(index); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    });

    if (data.length > 0) {
      this.promptMaster?.setSourceColumns(Object.keys(data[0]));
    }

    this.renderHeader();
    this.renderBody();

    if (this.data.length > 0) {
      this.promptButton.disabled = false;
      this.analyzeButton.disabled = false;
      this.exportXlsxButton.disabled = false;
      this.exportCsvButton.disabled = false;
    }
  }

  updateCell(rowIndex, columnIndex, value, status = 'success') {
    const row = this.table.querySelector(`#row-${rowIndex}`);
    if (!row) return;

    const cells = row.querySelectorAll('td');
    const targetCell = cells[Object.keys(this.data[0]).length + columnIndex];
    if (!targetCell) return;

    targetCell.textContent = value;
    row.className = `${status}-row`;
  }

  markRowAsProcessing(rowIndex) {
    const row = this.table.querySelector(`#row-${rowIndex}`);
    if (row) {
      row.className = 'processing-row';
    }
  }

  markRowAsError(rowIndex, error) {
    const row = this.table.querySelector(`#row-${rowIndex}`);
    if (!row) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    const sourceColumnsCount = Object.keys(this.data[0]).length;

    // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultCells = Array.from(row.cells).slice(sourceColumnsCount + 1);

    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏
    const rowData = this.data[rowIndex];
    const url = rowData['Link to the course'] || '';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –ø–æ–ª–Ω—ã–º URL
    const errorMessage = error.message.replace('[URL from Link to the course column]', url);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    if (resultCells[0]) {
      resultCells[0].textContent = errorMessage;
      resultCells[0].title = errorMessage; // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ Err
    for (let i = 1; i < resultCells.length; i++) {
      if (resultCells[i]) {
        resultCells[i].textContent = 'Err';
      }
    }

    row.className = 'error-row';
  }

  exportToExcel() {
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.table_to_sheet(this.table);
    XLSX.utils.book_append_sheet(wb, ws, 'Analysis Results');
    XLSX.writeFile(wb, 'analysis_results.xlsx');
  }

  exportToCSV() {
    const ws = XLSX.utils.table_to_sheet(this.table);
    const csv = XLSX.utils.sheet_to_csv(ws);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'analysis_results.csv';
    link.click();
  }

  render(parent) {
    parent.appendChild(this.element);
    return this;
  }

  applyColumnFilter(column, filterIcon) {
    const dropdown = document.querySelector(`.filter-dropdown[data-column="${column}"]`);
    if (!dropdown) {
      console.error('Dropdown not found for column:', column);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã, –∫—Ä–æ–º–µ "Select All"
    const checkboxWrappers = Array.from(
      dropdown.querySelectorAll('.filter-checkbox-wrapper')
    ).slice(1);
    const allowedValues = new Set();

    // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    checkboxWrappers.forEach(wrapper => {
      const checkbox = wrapper.querySelector('input[type="checkbox"]');
      const label = wrapper.querySelector('label');
      if (checkbox && label && checkbox.checked) {
        allowedValues.add(label.textContent === '(Empty)' ? '' : label.textContent);
      }
    });

    console.log('Allowed values:', allowedValues);

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    const columnIndex = Array.from(this.table.querySelectorAll('thead th')).findIndex(
      th => th.dataset.column === column
    );

    if (columnIndex === -1) {
      console.error('Column index not found for:', column);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
    this.filters[column] = allowedValues;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const rows = this.table.querySelectorAll('tbody tr');
    rows.forEach(row => {
      let showRow = true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      Object.entries(this.filters).forEach(([filterColumn, values]) => {
        const filterColumnIndex = Array.from(this.table.querySelectorAll('thead th')).findIndex(
          th => th.dataset.column === filterColumn
        );

        if (filterColumnIndex !== -1) {
          const cellValue = row.cells[filterColumnIndex]?.textContent || '';
          if (!values.has(cellValue)) {
            showRow = false;
          }
        }
      });

      row.style.display = showRow ? '' : 'none';
      console.log('Row value:', row.cells[columnIndex]?.textContent, 'Show:', showRow);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
    this.updateMasterCheckbox();
  }

  updateMasterCheckbox() {
    const visibleRows = Array.from(this.table.querySelectorAll('tbody tr')).filter(
      row => row.style.display !== 'none'
    );
    const selectedVisibleRows = visibleRows.filter(row =>
      this.selectedRows.has(Number(row.id.split('-')[1]))
    );

    const masterCheckbox = this.table.querySelector('thead input[type="checkbox"]');
    if (masterCheckbox) {
      masterCheckbox.checked =
        visibleRows.length > 0 && selectedVisibleRows.length === visibleRows.length;
    }
  }

  clearFilters() {
    this.filters = {};
    const rows = this.table.querySelectorAll('tbody tr');
    rows.forEach(row => {
      row.style.display = '';
    });
    this.updateMasterCheckbox();
  }

  createControls() {
    const controls = document.createElement('div');
    controls.className = 'controls';

    // File input
    this.fileInput = document.createElement('input');
    this.fileInput.type = 'file';
    this.fileInput.accept = '.xlsx,.csv';
    this.fileInput.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    this.fileInput.addEventListener('change', async e => {
      const file = e.target.files[0];
      if (!file) return;

      try {
        const data = await this.readFile(file);
        this.loadData(data);
      } catch (error) {
        alert('Error loading file: ' + error.message);
      }
    });

    // Load Data button
    const loadButton = document.createElement('button');
    loadButton.className = 'secondary';
    loadButton.textContent = 'Load Data';
    loadButton.setAttribute('data-icon', 'üìÇ');
    loadButton.onclick = () => this.fileInput.click();

    // Generate Prompt button
    const promptButton = document.createElement('button');
    promptButton.className = 'secondary';
    promptButton.textContent = 'Generate Prompt';
    promptButton.setAttribute('data-icon', '‚ú®');
    promptButton.disabled = true;
    promptButton.onclick = async () => {
      if (promptButton.disabled) return;

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const currentPrompt = document.getElementById('promptTemplate').value;
        const currentColumns = document
          .getElementById('outputColumns')
          .value.trim()
          .split('\n')
          .filter(Boolean);

        if (!currentPrompt) {
          alert('Please enter prompt template first');
          return;
        }

        if (!this.data || this.data.length === 0) {
          alert('Please load data first');
          return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        promptButton.disabled = true;
        promptButton.classList.add('processing');
        this.updateStatus('Generating improved prompt...', 'processing');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        const tableData = {
          headers: Object.keys(this.data[0]),
          rows: this.data.slice(0, 3),
        };

        // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç –º–∞—Å—Ç–µ—Ä
        this.promptMaster.setSourceColumns(tableData.headers);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const result = await this.promptMaster.generatePrompt(
          currentPrompt,
          currentColumns,
          tableData
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        document.getElementById('promptTemplate').value = result.prompt;
        document.getElementById('outputColumns').value = result.columns.join('\n');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        this.updateStatus('Prompt generated successfully!', 'success');
        setTimeout(() => this.clearStatus(), 3000);
      } catch (error) {
        this.updateStatus(`Error: ${error.message}`, 'error');
      } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        promptButton.disabled = false;
        promptButton.classList.remove('processing');
      }
    };
    this.promptButton = promptButton;

    // Start Analysis button
    const analyzeButton = document.createElement('button');
    analyzeButton.className = 'primary';
    analyzeButton.textContent = 'Analyze';
    analyzeButton.setAttribute('data-icon', 'üîç');
    analyzeButton.disabled = true;
    analyzeButton.onclick = async () => {
      try {
        analyzeButton.disabled = true;

        const promptTemplate = document.getElementById('promptTemplate').value;
        if (!promptTemplate) {
          throw new Error('Please enter analysis prompt first');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–æ–∫
        const currentFilters = { ...this.filters };
        const currentMarks = { ...this.rowMarks };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –¥–µ–ª–∞–µ–º —Ä–µ—Ñ—Ä–µ—à
        const outputColumns =
          document.getElementById('outputColumns')?.value.trim().split('\n') || [];
        this.columns = outputColumns.filter(Boolean);

        // –ü—Ä–∏ —Ä–µ—Ñ—Ä–µ—à–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.refreshTable(() => {
          this.filters = currentFilters;
          this.rowMarks = currentMarks;
          this.applyFilters();
        });

        this.analyst.setPrompt(promptTemplate);
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analyst.setRowMarks(this.rowMarks);
        await this.startAnalysis();
      } catch (error) {
        alert('Error during analysis: ' + error.message);
      } finally {
        analyzeButton.disabled = false;
      }
    };
    this.analyzeButton = analyzeButton;

    // Refresh Table button
    const refreshButton = document.createElement('button');
    refreshButton.className = 'secondary';
    refreshButton.textContent = 'Refresh Table';
    refreshButton.setAttribute('data-icon', 'üîÑ');
    refreshButton.onclick = () => this.refreshTable();

    // Export XLSX button
    const exportXlsxButton = document.createElement('button');
    exportXlsxButton.className = 'secondary';
    exportXlsxButton.textContent = 'Export Excel';
    exportXlsxButton.setAttribute('data-icon', 'üìä');
    exportXlsxButton.disabled = true;
    exportXlsxButton.onclick = () => this.exportToExcel();
    this.exportXlsxButton = exportXlsxButton;

    // Export CSV button
    const exportCsvButton = document.createElement('button');
    exportCsvButton.className = 'secondary';
    exportCsvButton.textContent = 'Export CSV';
    exportCsvButton.setAttribute('data-icon', 'üìÑ');
    exportCsvButton.disabled = true;
    exportCsvButton.onclick = () => this.exportToCSV();
    this.exportCsvButton = exportCsvButton;

    controls.append(
      this.fileInput,
      loadButton,
      promptButton,
      analyzeButton,
      refreshButton,
      exportXlsxButton,
      exportCsvButton
    );
    return controls;
  }

  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  async readFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = e => {
        try {
          const data = [];
          if (file.name.endsWith('.csv')) {
            // Parse CSV
            const text = e.target.result;
            const rows = text.split('\n');
            const headers = rows[0].split(',').map(h => h.trim());

            for (let i = 1; i < rows.length; i++) {
              const values = rows[i].split(',').map(v => v.trim());
              if (values.length === headers.length) {
                const row = {};
                headers.forEach((header, index) => {
                  row[header] = values[index];
                });
                data.push(row);
              }
            }
          } else {
            // Parse Excel
            const workbook = XLSX.read(e.target.result, { type: 'binary' });
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const rows = XLSX.utils.sheet_to_json(sheet);
            data.push(...rows);
          }
          resolve(data);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = reject;

      if (file.name.endsWith('.csv')) {
        reader.readAsText(file);
      } else {
        reader.readAsBinaryString(file);
      }
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ refreshTable
  refreshTable(callback) {
    this.renderHeader();
    this.renderBody();
    if (callback) callback();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
  updateStatus(message, type = 'info') {
    this.statusBar.textContent = message;
    this.statusBar.className = `status-bar ${type}`;
    this.statusBar.style.display = 'block';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
  clearStatus() {
    this.statusBar.style.display = 'none';
  }

  async startAnalysis() {
    try {
      if (!this.settings?.analysisProvider) {
        throw new Error('Analysis provider not configured. Please check your settings.');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
      this.promptMaster.saveCurrentPrompt(
        document.getElementById('promptTemplate').value,
        document.getElementById('outputColumns').value.split('\n')
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      const results = [];
      let shouldContinue = true;

      for (let i = 0; i < this.data.length; i++) {
        if (!shouldContinue || this.rowMarks[i] !== 'true') continue;

        try {
          const result = await this.analyzeRow(this.data[i], i);
          results.push(result);

          // –ü–æ—Å–ª–µ 3-—Ö —Å—Ç—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (results.length === 3) {
            if (this.promptMaster.checkInitialResults(results)) {
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–±—É–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
              const newPrompt = await this.promptMaster.regeneratePromptAfterError(
                document.getElementById('promptTemplate').value,
                document.getElementById('outputColumns').value.split('\n'),
                { headers: Object.keys(this.data[0]), rows: this.data.slice(0, 3) }
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
              document.getElementById('promptTemplate').value = newPrompt.prompt;
              shouldContinue = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
              return this.startAnalysis(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            }
          }
        } catch (error) {
          console.error(`Error analyzing row ${i}:`, error);
          this.markRowAsError(i, error);
          results.push({ error: error.message });
        }
      }

      return results;
    } catch (error) {
      if (error.message.includes('3 –ø–æ–ø—ã—Ç–æ–∫')) {
        alert(error.message);
      }
      throw error;
    }
  }

  async analyzeRow(row, index) {
    try {
      this.markRowAsProcessing(index);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
      let filledPrompt = document.getElementById('promptTemplate').value;
      Object.entries(row).forEach(([key, value]) => {
        filledPrompt = filledPrompt.replace(new RegExp(`{{${key}}}`, 'g'), value || '');
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
      const response = await this.settings.analysisProvider.generateResponse(filledPrompt);

      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const jsonStr = this.extractJsonFromResponse(response);
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        const result = JSON.parse(jsonStr);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Object.entries(result).forEach(([key, value], colIndex) => {
          this.updateCell(index, colIndex + 1, value);
        });

        return result;
      } catch (parseError) {
        console.error('Raw response:', response);
        console.error('Parse error:', parseError);
        throw new Error(`Failed to parse model response as JSON: ${parseError.message}`);
      }
    } catch (error) {
      console.error(`Error in analyzeRow(${index}):`, error);
      this.markRowAsError(index, error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
  extractJsonFromResponse(response) {
    try {
      // –£–±–∏—Ä–∞–µ–º markdown-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–¥–∞
      let jsonStr = response.replace(/```(json)?/g, '').trim();
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é { –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é }
      const startIdx = jsonStr.indexOf('{');
      const endIdx = jsonStr.lastIndexOf('}');
      
      if (startIdx === -1 || endIdx === -1) {
        throw new Error('No JSON object found in response');
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ JSON-—á–∞—Å—Ç—å
      jsonStr = jsonStr.substring(startIdx, endIdx + 1);
      
      // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      jsonStr = jsonStr.replace(/[""]/g, '"');
      
      // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      jsonStr = jsonStr.replace(/\\n/g, ' ');
      
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      jsonStr = jsonStr.replace(/\/\/.*/g, '');
      
      return jsonStr;
    } catch (error) {
      console.error('Error extracting JSON:', error);
      throw new Error(`Failed to extract JSON from response: ${error.message}`);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
  handleMasterCheckbox(e) {
    this.toggleAllRows(e.target.checked);
  }

  handleRowCheckbox(index, checked) {
    if (checked) {
      this.selectedRows.add(index);
      this.rowMarks[index] = 'true';
    } else {
      this.selectedRows.delete(index);
      this.rowMarks[index] = 'false';
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
  updateFilteredRows(filteredIndexes) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
    const previousStates = { ...this.rowMarks };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    Object.keys(this.rowMarks).forEach(index => {
      if (!filteredIndexes.includes(Number(index))) {
        this.rowMarks[index] = 'hidden';
      } else {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å—Ç–∞–≤–∏–º true –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.rowMarks[index] = previousStates[index] || 'true';
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è NA
  fillRowNA(rowIndex) {
    const result = {};
    this.columns.forEach(column => {
      result[column] = 'NA';
    });
    this.updateRow(rowIndex, result);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  updateSettings(settings) {
    this.settings = settings;
    if (settings?.analysisProvider) {
      console.log('Analysis provider updated:', settings.analysisProvider.name);
    } else {
      console.warn('No analysis provider in settings');
    }
  }

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  prepareDataForExport() {
    return this.data.map((row, index) => ({
      ...row,
      ...this.getAnalysisResults(index),
      Selected: this.rowMarks[index] || 'false',
    }));
  }
}
